name: Build and Push to ECR

on:
  push:
    branches:
      - main
permissions:
  id-token: write
  contents: read
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::515833118963:role/mariotorresc-github-actions-BackendAPIBroker
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"
          registry-type: public

      - name: Build, tag, and push image of api to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: b1r2y5q5
          REPOSITORY: backendapibroker
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG ./api
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push image of mqtt to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: b1r2y5q5
          REPOSITORY: mqtt-conections
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG ./MQTTConections
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::515833118963:role/mariotorresc-github-actions-BackendAPIBroker
          aws-region: us-east-1

      - name: Zip Artifacts to deploy
        run: zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml

      - name: Upload the zip to S3
        run:
          zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml |
          aws s3 cp deploy.zip s3://codedeploy-bucket-backendapibroker

      - name: Set up Docker Compose environment
        run: |
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "MQTT_HOST=${{ secrets.MQTT_HOST }}" >> .env
          echo "MQTT_PORT=${{ secrets.MQTT_PORT }}" >> .env
          echo "MQTT_USER=${{ secrets.MQTT_USER }}" >> .env
          echo "MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}" >> .env
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "REDIRECT_URL=${{ secrets.REDIRECT_URL }}" >> .env

      - name: Create Codedeploy Deployment
        id: codedeploy-deploy-trigger
        env:
          DEPLOYMENT_APPLICATION_NAME: api-codedeploy
          DEPLOYMENT_GROUP_NAME: deploy-group
          DEPLOYMENT_BUCKET_NAME: codedeploy-bucket-backendapibroker
        run: |
          deploymentId=$( aws deploy create-deployment \
            --application-name $DEPLOYMENT_APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP_NAME \
            --s3-location bucket=$DEPLOYMENT_BUCKET_NAME,key=deploy.zip,bundleType=zip --file-exists-behavior OVERWRITE --region us-east-2 \
            --description "Automatic deployment from github commit ${{github.sha}}" | jq -r '.deploymentId' )
          echo "deploymentId=$deploymentId" >> $GITHUB_OUTPUT

      - name: Wait until deployment is done
        run: aws deploy wait deployment-successful --region us-east-2 --deployment-id ${{steps.codedeploy-deploy-trigger.outputs.deploymentId}}
