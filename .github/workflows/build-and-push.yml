name: Build and Push to ECR

on:
  push:
    branches:
      - Webpay
permissions:
  id-token: write
  contents: read
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::515833118963:role/mariotorresc-github-actions-BackendAPIBroker
          aws-region: us-east-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          registry-type: public

      - name: Build, tag, and push image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: b1r2y5q5
          REPOSITORY: backendapibroker
          IMAGE_TAG: latest
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::515833118963:role/mariotorresc-github-actions-BackendAPIBroker
          aws-region: us-east-1

      - name: Zip the file
        run: zip -r deploy.zip scripts/ appspec.yml docker-compose.production.yml

      - name: Upload the zip to S3
        run: aws s3 cp deploy.zip s3://codedeploy-bucket-backendapibroker

      - name: Create Codedeploy Deployment
        id: codedeploy-deploy-trigger
        env:
          DEPLOYMENT_APPLICATION_NAME: api-codedeploy
          DEPLOYMENT_GROUP_NAME: deploy-group
          DEPLOYMENT_BUCKET_NAME: codedeploy-bucket-backendapibroker
        run: |
          deploymentId=$( aws deploy create-deployment \
            --application-name $DEPLOYMENT_APPLICATION_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP_NAME \
            --s3-location bucket=$DEPLOYMENT_BUCKET_NAME,key=deploy.zip,bundleType=zip \
            --description "Automatic deployment from github commit ${{github.sha}}" | jq -r '.deploymentId' )
          echo "deploymentId=$deploymentId" >> $GITHUB_OUTPUT

      - name: Wait until deployment is done
        run: aws deploy wait deployment-successful --deployment-id ${{steps.codedeploy-deploy-trigger.outputs.deploymentId}}
